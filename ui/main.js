// main.js ‚Äî versi√≥n segura para GitHub Pages y entorno local
(async function init() {
  console.log("üöÄ Iniciando aplicaci√≥n...");

  // === CONFIGURACI√ìN DE RUTAS ===
  // En GitHub Pages, el index.html est√° en ra√≠z, y los JSON en /data/
  // En local, la estructura es la misma, as√≠ que se mantiene igual.
  const PATHS = {
    ontology: "data/ontology2.json",
    hierarchy: "data/class-hierarchy2.json"
  };

  // === DESCRIPTOR PANEL ===
  try {
    await Descriptor.init("descriptor", PATHS.ontology);
    console.log("üìò Descriptor cargado correctamente");
  } catch (err) {
    console.error("[Descriptor] ‚ùå Error cargando ontolog√≠a:", err);
  }

  // === DROPDOWN TREE ===
  try {
    await DropdownTree.init("dropdown", PATHS.hierarchy);
    console.log("üå≥ Dropdown Tree cargado correctamente");
  } catch (err) {
    console.error("[DropdownTree] ‚ùå Error cargando jerarqu√≠a:", err);
  }

  console.log("‚úÖ main.js cargado por completo");

  // === TREE VIEW (si existe) ===
  if (window.TreeView && typeof TreeView.init === "function") {
    try {
      console.log("üü¢ Ejecutando TreeView.init manualmente");
      await TreeView.init("tree-chart", PATHS.hierarchy);
      console.log("üå≤ TreeView renderizado correctamente");
    } catch (err) {
      console.error("‚ùå No se pudo inicializar TreeView:", err);
    }
  }

  // === RELATION GRAPH (si existe) ===
  if (window.RelationGraph && typeof RelationGraph.init === "function") {
    try {
      await RelationGraph.init("relation-graph", PATHS.ontology);
      console.log("üîó RelationGraph renderizado correctamente");
    } catch (err) {
      console.error("[RelationGraph] ‚ùå Error al cargar la ontolog√≠a:", err);
    }
  }

  console.log("üü¢ Aplicaci√≥n inicializada completamente");
})();
